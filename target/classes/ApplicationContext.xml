<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	<!-- 1.自动扫描组件 扫描包 -->
	<context:component-scan base-package="com.pxg.*"></context:component-scan>
	<!-- 引入数据库数据源 -->
	<context:property-placeholder location="classpath:db.properties" />
	<!-- 2.配置基本属性 username/password/ 连接池 -->
	<bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>  
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!-- 配置初始化大小，最小，最大 -->
		<property name="initialSize" value="1"></property>
		<property name="minIdle" value="10"></property>
		<property name="maxActive" value="30"></property> 
		<!-- 配置获取连接等待超时的时间 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000"></property> 
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲时间，单位毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000"></property>
		<property name="testWhileIdle" value="false"></property>
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小  -->
		<property name="poolPreparedStatements" value="false"/>
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
		<property name="defaultAutoCommit" value="true" />
		<property name="validationQueryTimeout" value="60000"/>
		<!-- 数据库连接有效性 -->
		<property name="validationQuery" value="select 1 from dual" />
	</bean>
	<!-- 3.配置连接池 数据源 -->
	<bean id="dataSoure_druid" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
		<property name="targetDataSource" ref="druidDataSource"></property>
	</bean>
	<!--4.创建一个sql会话工厂bean，指定数据源 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定数据源 -->
		<property name="dataSource" ref="dataSoure_druid"></property>
		<!-- 指定MyBatis核心配置文件地址 -->
		 <property name="configLocation" value="classpath:MyBatisConfig.xml"></property> 
		<!-- 自动扫描mapping.xml文件，注意这里的classpath后面是* 必须要的 -->
		<property name="mapperLocations" value="classpath*:com/pxg/mapper/*Mapper.xml"></property>
		<!-- pojo所在包，为pojo类取别名，别名就为类名 -->
		<property name="typeAliasesPackage" value="com.pxg.model"></property>
		<!-- 真核pageHelper分页插件 -->
		<property name="plugins">
			<array>
				<!-- 插件类型 -->
				<bean class="com.github.pagehelper.PageInterceptor">
					<property name="properties" value="helperDialect=oracle"></property>
				</bean>
			</array>
		</property>
	</bean>
	<!--5. MyBtis DAO所在包名，Spring或自动查找旗下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 数据源 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- MyBatis DAO接口所在包名，nasePackage指定的包下面的类会自动查找 -->
		<property name="basePackage" value="com.pxg.dao" />
	</bean>
	<!-- 6.事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSoure_druid"></property>
	</bean>
	<!-- 7.配置事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 排除事务方法 -->
			<tx:method name="get*" propagation="NEVER"/>
			<tx:method name="set*" propagation="NEVER"/>
			<tx:method name="find*" propagation="NEVER"/>
			<tx:method name="select*" propagation="NEVER"/>
			<tx:method name="query*" propagation="NEVER"/>
			<!-- 自动管理事务的方法 -->
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="del*" propagation="REQUIRED"/>
			<!-- 其他情况下默认 -->
			<tx:method name="*" propagation="SUPPORTS"/>
		</tx:attributes>
	</tx:advice>
	<!-- 8.事务切入到业务逻辑层 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.pxg.service.*.*(..))" id="txPointcut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
	<!-- 另一种方法开启事务、开启事务管理 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->
</beans>
